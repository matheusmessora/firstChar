package br.messora.matheus.app;

import br.messora.matheus.app.stream.Stream;
import br.messora.matheus.app.stream.StreamImpl;
import org.testng.annotations.Test;
import sun.security.x509.UniqueIdentity;

import java.util.Date;
import java.util.Random;

import static org.testng.Assert.*;

public class AppTest {


    private char firstChar(Stream stream) {
        Long timeStart = new Date().getTime();
        char result = App.firstChar(stream);
        Long timeEnd = new Date().getTime();
        System.out.println("Time[" + (timeEnd - timeStart) + "]ms");
        return result;
    }

    //
    @Test
    public void acceptance_test(){
        String input = "aAbBABac";
        Stream stream = new StreamImpl(input);


        char result = firstChar(stream);
        assertEquals(result, 'b');

    }


    @Test
    public void acceptance_test2(){
        String input = "ABB";
        Stream stream = new StreamImpl(input);


        char result = firstChar(stream);
        assertEquals(result, 'A');

    }

    @Test
    public void acceptance_test3(){
        String input = "BBA";
        Stream stream = new StreamImpl(input);


        char result = firstChar(stream);
        assertEquals(result, 'A');

    }

    @Test
    public void acceptance_test4(){
        String input = "ABCDEFABCDEF1";
        Stream stream = new StreamImpl(input);


        char result = firstChar(stream);
        assertEquals(result, '1');

    }

    @Test
    public void should_return_last_char_from_big_stream(){
        String input
        Stream stream = new StreamImpl(input);


        char result = firstChar(stream);
        assertEquals(result, 'Z');

    }

    @Test
    public void should_return_first_char_from_big_stream(){
        String input
        Stream stream = new StreamImpl(input);


        char result = firstChar(stream);
        assertEquals(result, 'X');

    }

    @Test
    public void should_return_first_char_from_all_uniques(){
        String input = "QWERTYUIOPASDFGHJKLZXCVBNM!@#$%^&*()1234567890_+-=";
        Stream stream = new StreamImpl(input);


        char result = firstChar(stream);
        assertEquals(result, 'Q');

    }

    @Test
    public void should_return_first_unique_char_from_random_stream() {
        char UNIQUE = '9';
        String dataArray = "QWERTYUIOPASDFGHJKLZXCVBNM013458";
        Random random = new Random();
        StringBuilder stringBuilder = new StringBuilder();
        int size = 30000;
        while (size > 0) {
            int index = random.nextInt(dataArray.length());
            stringBuilder.append(dataArray.charAt(index));
            size--;
        }
        stringBuilder.append(UNIQUE);
        System.out.println("START\n" + stringBuilder);
        Stream stream = new StreamImpl(stringBuilder.toString());

        char result = firstChar(stream); // 20ms 39ms 43ms
        System.out.println("FINISHED\n");
        assertEquals(result, '9');

    }

}